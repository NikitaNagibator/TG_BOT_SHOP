import asyncio
import configparser
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
# import yoomoney_payment –ó–ê–ú–û–†–û–ñ–ï–ù–ù–û –¥–æ –ü–æ–ª—É—á–µ–Ω–∏—è –ò–ü –∏–ª–∏ –°–∞–º–æ–∑–∞–Ω—è—Ç–æ–≥–æ
from data import Database
import keyboard as kb
import keyboard_inline as kbi

cfg = configparser.ConfigParser()
cfg.read("config.ini")

TOKEN = cfg["Telegram"]["bot_token"]

bot = Bot(token=TOKEN)
dp = Dispatcher()
db = Database("database.db")


# <–û–∂–∏–¥–∞–Ω–∏–µ>------------------------
class Form(StatesGroup):
    data_cost = State()
    screenshot = State()
    change_costs = State()
    buy = State()
    input_cost = State()
    like_dislike = State()
    feedback_scr = State()
    feedback = State()


# </–û–∂–∏–¥–∞–Ω–∏–µ>------------------------

# <–ú–µ–π–Ω —á–∞—Å—Ç—å>------------------------
@dp.message(F.text == "/start")
async def start(message: Message, state: FSMContext):
    user__id = message.from_user.id
    if not db.user_exist(user_id=user__id):
        db.add_user_id_and_name(user_id=user__id, user_name=message.from_user.full_name)
        print("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
    else:
        print("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

    await message.answer(f"<b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}</b>! –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å"
                         f" <b>–î–ï–®–ï–í–û –õ–Æ–ë–£–Æ –ü–û–î–ü–ò–°–ö–£</b>, —Ç—ã –ø–æ–ø–∞–ª —Ç—É–¥–∞ –∫—É–¥–∞ –Ω–∞–¥–æ!üòâ\n\n"
                         f"P.S. –£ –Ω–∞—Å –°–ê–ú–´–ï –ù–ò–ó–ö–ò–ï –¶–ï–ù–´ –Ω–∞ —Ä—ã–Ω–∫–µü§≠",
                         parse_mode="HTML")
    await main_menu(message, state)


@dp.message(F.text == "/menu")
@dp.message(F.text == "–ú–µ–Ω—é")
async def main_menu(message: Message, state: FSMContext):
    db.del_feed_by_user_id(user_id=message.from_user.id)
    await state.clear()
    db.update_data_buy(user_id=message.from_user.id, new_data="")
    user__id = message.from_user.id
    if not db.check_admin_status(user_id=user__id):
        await message.answer(f"{message.from_user.full_name}, –Ω–µ –±—É–¥–µ–º —Ç—è–Ω—É—Ç—å! <b>–î–∞–≤–∞–π –∑–∞–∫—É–ø–∞—Ç—å—Å—è!</b>",
                             parse_mode="HTML",
                             reply_markup=kb.choice_goods_kb)
    else:
        await message.answer(f"{message.from_user.full_name}, –Ω–µ –±—É–¥–µ–º —Ç—è–Ω—É—Ç—å! <b>–î–∞–≤–∞–π –∑–∞–∫—É–ø–∞—Ç—å—Å—è!</b>",
                             parse_mode="HTML",
                             reply_markup=kb.choice_goods_for_admin_kb)


@dp.message(F.text == "–ù–∞–∑–∞–¥")
@dp.message(F.text == "–í—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä")
async def choise_goods(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f"<b>–£ –Ω–∞—Å –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä!</b> –î–∞–≤–∞–π –≤—ã–±–∏—Ä–∞–π!",
                         parse_mode="HTML", reply_markup=kbi.goods_kbi)


# </–ú–µ–π–Ω —á–∞—Å—Ç—å>--------------------------------------------------

# <–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å>--------------------------------------------------
@dp.message(F.text == "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel(message: Message, state: FSMContext):
    user__id = message.from_user.id
    await state.clear()
    if db.check_admin_status(user_id=user__id):
        await message.answer("–≠—Ç–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!", reply_markup=kb.admin_panel_kb)
    else:
        await message.answer("<b>–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–¥–Ω–µ!</b>", "HTML")


# </–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å>-------------------------------------------------

# <–û—Ç–∑—ã–≤—ã>--------------------------------------------------------
@dp.message(F.text == "–û—Ç–∑—ã–≤—ã")
async def feedback_menu(message: Message, state: FSMContext):
    if db.get_10_feedback() != "–ü–£–°–¢–û":
        for data in db.get_10_feedback():
            if data[4] is None:
                await message.answer(f'"{data[3]}"\n@{data[2]}', reply_markup=kb.feedback_kb)
            else:
                await message.answer_photo(photo=data[4], caption=f'"{data[3]}"\n@{data[2]}', reply_markup=kb.feedback_kb)
    else:
        await message.answer("<b>–û—Å—Ç–∞–≤—Ç–µ –ø–µ—Ä–≤—ã–π –æ—Ç–∑—ã–≤!</b>", reply_markup=kb.feedback_kb, parse_mode="HTML")


@dp.message(F.text == "–û—Å—Ç–∞–≤–∏—Ç—å")
async def to_feedback(message: Message, state: FSMContext):
    await message.answer(
        "–°–Ω–∞—á–∞–ª–∞ —Å–∫–∏–Ω—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å\n–î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤\n–ò –≤ –∫–æ–Ω—Ü–µ –∫–æ–Ω—Ü–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –û–°–¢–ê–í–ò–¢–¨!")
    await message.answer("–í—Å–µ –¥–∞–≤–∞–π, –∂–¥—É —Å–∫—Ä–∏–Ω—à–æ—Ç!", reply_markup=kb.feedback_scr_kb)
    await state.set_state(Form.feedback_scr)


@dp.message(Form.feedback_scr)
async def feedback_scr(message: Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.from_user.username
    db.add_feed(user_id=user_id, user_name=user_name)
    if message.photo:
        db.update_feed_scr(screen=message.photo[-1].file_id, user_id=user_id)
        await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –ø—Ä–∏–Ω—è—Ç, –∂–¥—É –ø–æ–∫–∞ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤!", reply_markup=kb.menu_kb)
        await state.clear()
        await state.set_state(Form.feedback)
    elif message.text == "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await message.answer("–¢–æ–≥–¥–∞ –∂–¥—É –ø–æ–∫–∞ –≤—ã –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–∑—ã–≤!", reply_markup=kb.menu_kb)
        await state.clear()
        await state.set_state(Form.feedback)
    else:
        await message.answer("–ê-—É-—É-—É, —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∏–Ω—å \n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ /menu")


@dp.message(Form.feedback)
async def feedback_add(message: Message, state: FSMContext):
    if message.text == '–ú–µ–Ω—é':
        await main_menu(message, state)
        db.del_feed_by_user_id(user_id=message.from_user.id)
    elif message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await message.answer(f"–¢–ê–ö –ù–ï–õ–¨–ó–Ø!")
    elif message.text and 150 >= len(message.text) >= 5:
        db.update_feed(feedback=message.text,user_id=message.from_user.id)
        db.add_feedback(user_id=message.from_user.id)
        db.del_feed_by_user_id(user_id=message.from_user.id)
        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!")
        await main_menu(message,state)
        await state.clear()
    elif message.text:
        await message.answer("–í–∞—à –æ—Ç–∑—ã–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–∑—ã–≤!"
                             "\n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ /menu")


# </–û—Ç–∑—ã–≤—ã>-------------------------------------------------------


# <–Ø–Ω–¥–µ–∫—Å> --------------------------------------------------------------------------------------------
@dp.callback_query(F.data == "–Ø–ü–ª—é—Å")
async def yandex(call: CallbackQuery):
    await call.message.answer_photo(photo="https://www.digiseller.ru/preview/147467/p1_3425937_ea806abc.jpg",
                                    caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å!</b>",
                                    parse_mode="HTML", reply_markup=kbi.choise_yandex_kbi)
    await call.answer()


@dp.callback_query(F.data == "–Ø–ü–ª—é—Å_3–º–µ—Å")
async def yandex_3mes(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å</b> –Ω–∞ <b>3 –º–µ—Å—è—Ü–∞</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_yandex_3_kbi)
    await call.answer()


@dp.callback_query(F.data == "–Ø–ü–ª—é—Å_6–º–µ—Å")
async def yandex_6mes(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å</b> –Ω–∞ <b>6 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_yandex_6_kbi)
    await call.answer()


@dp.callback_query(F.data == "–Ø–ü–ª—é—Å_12–º–µ—Å")
async def yandex_12mes(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å</b> –Ω–∞ <b>12 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_yandex_12_kbi)
    await call.answer()


# </–Ø–Ω–¥–µ–∫—Å>-----------------------------------------------------------------------------------------------------

# <–î–∏—Å–∫–æ—Ä–¥>-----------------------------------------------------------------------------------------------------
@dp.callback_query(F.data == "DSNitro")
async def discord(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer_photo(photo="https://www.digiseller.ru/preview/1074943/p1_3360950_2f2a4b46.jpg",
                                    caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Discord Nitro!</b>",
                                    parse_mode="HTML", reply_markup=kbi.choise_discord_kbi)
    await call.answer()


@dp.callback_query(F.data == "Dis_3–º–µ—Å")
async def yandex_3m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Discord Nitro</b> –Ω–∞ <b>3 –º–µ—Å—è—Ü–∞</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_discord_3_kbi)
    await call.answer()


@dp.callback_query(F.data == "Dis_6–º–µ—Å")
async def yandex_6m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Discord Nitro</b> –Ω–∞ <b>6 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_discord_6_kbi)
    await call.answer()


@dp.callback_query(F.data == "Dis_12–º–µ—Å")
async def yandex_12m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Discord Nitro</b> –Ω–∞ <b>12 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_discord_12_kbi)
    await call.answer()


# </–î–∏—Å–∫–æ—Ä–¥>-----------------------------------------------------------------------------------------------------------

# <–°–ø–æ—Ç–∏—Ñ–∞–π>----------------------------------------------------------------------------------------------------
@dp.callback_query(F.data == "Spotify")
async def spotify(call: CallbackQuery):
    await call.message.answer_photo(
        photo="https://mygiftcard.ru/upload/iblock/334/3342b2078932d0016930faacc78ec248.png",
        caption="–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Spotify Premium!</b>",
        parse_mode="HTML", reply_markup=kbi.choise_spotify_kbi)
    await call.answer()


@dp.callback_query(F.data == "SP_3–º–µ—Å")
async def yandex_3m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Spotify Premium</b> –Ω–∞ <b>3 –º–µ—Å—è—Ü–∞</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_spotify_3_kbi)
    await call.answer()


@dp.callback_query(F.data == "SP_6–º–µ—Å")
async def yandex_6m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Spotify Premium</b> –Ω–∞ <b>6 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_spotify_6_kbi)
    await call.answer()


@dp.callback_query(F.data == "SP_12–º–µ—Å")
async def yandex_12m(call: CallbackQuery):
    db.update_data_buy(user_id=call.from_user.id, new_data=call.data)
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Spotify Premium</b> –Ω–∞ <b>12 –º–µ—Å—è—Ü–µ–≤</b>", parse_mode="HTML",
                              reply_markup=kbi.buy_spotify_12_kbi)
    await call.answer()


# </–°–ø–æ—Ç–∏—Ñ–∞–π>----------------------------------------------------------------------------------------------------------

# <>-----------------------------------------------------------------------------------------------------------
@dp.callback_query(F.data == "–û–ø–ª–∞—Ç–∞")
async def buy(call: CallbackQuery, state: FSMContext):
    user__id = call.from_user.id
    if db.get_subs_code_by_data(data=db.check_data_buy(user_id=user__id)) != "–ù–µ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏" or db.get_subs_code_by_data(data=db.check_data_buy(user_id=user__id)) == "–ù–µ—Ç –¥–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏":
        await asyncio.sleep(1)
        await call.message.answer(
            f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏! –Æ–ö–∞—Å—Å–∞ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–∏–¥–µ—Ç—Å—è –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–µ—Ä–µ–≤–æ–¥–æ–º!")
        await call.message.answer(
            f"–ú—ã —Ä–µ—à–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É, —Å–µ–∫—É–Ω–¥–æ—á–∫—É!")
        await asyncio.sleep(4)
        await call.message.answer(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <u><b>{db.check_goods_with_data(data=db.check_data_buy(user_id=user__id))}</b></u>\n\n"
            f"–°–∫–∏–Ω—å—Ç–µ <b><u>{db.check_price_with_data(data=db.check_data_buy(user_id=user__id))} —Ä—É–±–ª–µ–π </u></b>"
            f"–ø–æ –Ω–æ–º–µ—Ä—É –∫–∞—Ä—Ç—ã:\n\n"
            f"<code><b>{cfg['Card']['number_of_card']}</b></code> \n\n"
            f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–∫–∏–Ω—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!", "HTML")
        await state.set_state(Form.screenshot)
        await call.answer()
    else:
        await call.message.answer(
            f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –¥–∞–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞"
            " –ø–æ–¥–æ–∂–¥–∏—Ç–µ —á–∞—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ø–æ–¥–ø–∏—Å–∫—É!")
        await call.answer()
        db.add_ne_hvatilo_subs(user_id=user__id, data=db.check_data_buy(user_id=user__id))
        for admin_id in db.get_all_admin_status():
            await bot.send_message(chat_id=admin_id[0],
                                   text=f"<b>{db.count_ne_hvatilo()} –ª—é–¥—è–º –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –ø–æ–¥–ø–∏—Å–∫–∏!</b>", parse_mode="HTML")
        await choise_goods(call.message, state)


@dp.message(Form.screenshot)
async def wait_screenshot(message: Message):
    if message.photo:
        user__id = message.from_user.id
        screenshot = message.photo[-1].file_id
        db.add_data_to_goods(user_id=user__id,
                             goods_name=db.check_goods_with_data(data=db.check_data_buy(user_id=user__id)),
                             goods_cost=db.check_price_with_data(data=db.check_data_buy(user_id=user__id)),
                             screensh=screenshot, user_name=message.from_user.full_name)
        await message.answer("–í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–º –æ–ø–ª–∞—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø–æ–¥–ø–∏—Å–∫—É")
        await message.answer(
            f"{message.from_user.full_name}, –∏–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞, –º—ã —É—Å–µ—Ä–¥–Ω–æ —Å—Ç–∞—Ä–∞–µ–º—Å—è —É—Å–∫–æ—Ä–∏—Ç—å –Ω–∞—à—É "
            f"—Ä–∞–±–æ—Ç—É!")
    else:
        await message.answer("–ê-—É-—É-—É, —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∫–∏–Ω—å \n–ò–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ /menu")


# </>------------------------------------------------------------


# <–í–∫–ª/–í—ã–∫–ª –ê–î–ú–ò–ù–ö–£>---------------------------------------------
@dp.message(F.text == "/i_am_an_admin")
async def admin_status_on(message: Message, state: FSMContext):
    user__id = message.from_user.id
    db.admin_status_on(user_id=user__id)
    await message.answer("<b>–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–æ–º!</b>", parse_mode="HTML")
    await main_menu(message, state)


@dp.message(F.text == "/check_status")
async def check_status(message: Message):
    user__id = message.from_user.id
    if db.check_admin_status(user_id=user__id):
        await message.answer("–í–∞—à —Å—Ç–∞—Ç—É—Å: <b>–ê–¥–º–∏–Ω</b>", parse_mode="HTML")
    else:
        await message.answer("–í–∞—à —Å—Ç–∞—Ç—É—Å: <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b>", parse_mode="HTML")


# </–í–∫–ª/–í—ã–∫–ª –ê–î–ú–ò–ù–ö–£>---------------------------------------------

# <–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω>-------------------------------------------------
@dp.message(F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω")
async def change_costs(message: Message):
    await message.answer("–≠—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω!", reply_markup=kbi.change_costs_kbi)


# ------
@dp.callback_query(F.data == "Yandex_change")
async def yandex_change_costs(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å</b>,\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏", 'HTML',
                              reply_markup=kbi.yandex_change_costs_kbi)
    await state.set_state(Form.change_costs)
    await call.answer()


@dp.callback_query(F.data == "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 3 –º–µ—Å—è—Ü–∞")
async def yandex3_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 3 –º–µ—Å—è—Ü–∞")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 6 –º–µ—Å—è—Ü–µ–≤")
async def yandex6_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 6 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 12 –º–µ—Å—è—Ü–µ–≤")
async def yandex12_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="–Ø–Ω–¥–µ–∫—Å –ü–ª—é—Å 12 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


# -----

# -----
@dp.callback_query(F.data == "Discord_change")
async def discord_change_costs(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Discord Nitro</b>,\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏", 'HTML',
                              reply_markup=kbi.discord_change_costs_kbi)
    await state.set_state(Form.change_costs)
    await call.answer()


@dp.callback_query(F.data == "Discord 3 –º–µ—Å—è—Ü–∞")
async def discord3_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Discord 3 –º–µ—Å—è—Ü–∞")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "Discord 6 –º–µ—Å—è—Ü–µ–≤")
async def discord6_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Discord 6 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "Discord 12 –º–µ—Å—è—Ü–µ–≤")
async def discord12_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Discord 12 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


# -----

# -----
@dp.callback_query(F.data == "Spotify_change")
async def spotify_change_costs(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>Spotify</b>,\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏", 'HTML',
                              reply_markup=kbi.spotify_change_costs_kbi)
    await state.set_state(Form.change_costs)
    await call.answer()


@dp.callback_query(F.data == "Spotify Premium 3 –º–µ—Å—è—Ü–∞")
async def spotify3_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Spotify Premium 3 –º–µ—Å—è—Ü–∞")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "Spotify Premium 6 –º–µ—Å—è—Ü–µ–≤")
async def spotify6_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Spotify Premium 6 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


@dp.callback_query(F.data == "Spotify Premium 12 –º–µ—Å—è—Ü–µ–≤")
async def spotify12_change_costs(call: CallbackQuery, state: FSMContext):
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –≤ –æ–±—ä–µ–∫—Ç state
    await state.update_data(chosen_plan="Spotify Premium 12 –º–µ—Å—è—Ü–µ–≤")
    await change_costs(call.message, state)
    await call.answer()


# -----
@dp.message(Form.change_costs)
async def change_costs(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–ª–∞–Ω –∏–∑ –æ–±—ä–µ–∫—Ç–∞ state
    data = await state.get_data()
    chosen_plan = data.get("chosen_plan", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    await message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞–Ω: <b>{chosen_plan}. –¶–µ–Ω–∞ —Å–µ–π—á–∞—Å ({db.check_price(chosen_plan)}) </b> ",
                         "HTML")
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ—é —Ü–µ–Ω—É:")
    await state.set_state(Form.input_cost)


@dp.message(Form.input_cost)
async def input_costa(message: Message, state: FSMContext):
    data = await state.get_data()
    chosen_plan = data.get("chosen_plan", "–ù–µ –≤—ã–±—Ä–∞–Ω–æ")
    try:
        if isinstance(int(message.text), int):
            db.update_price(name_goods=chosen_plan, new_price=message.text)
            await message.answer(f"–¶–µ–Ω–∞ –Ω–∞ <b>{chosen_plan}</b> —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–Ω–∞ –Ω–∞ <b>{message.text} —Ä—É–±.</b>", "HTML")
            await state.clear()
            await main_menu(message, state)
    except:
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∫–æ—Ä–µ–∫—Ç–Ω–æ, –∞ –Ω–µ {message.text}")


# </–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–Ω>------------------------------------------------

# <–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–∫–∏>----------------------------------------------
@dp.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∫–∞")
async def proverka(message: Message, state: FSMContext):
    user__id = message.from_user.id
    if not db.check_admin_status(user_id=user__id):
        await message.answer("–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
    else:
        await message.answer(f"{message.from_user.full_name}, <b>–¥–∞–≤–∞–π –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø–æ–∫—É–ø–∫–∏!</b>",
                             parse_mode="HTML")
        await process_oplata_check(message, state)


async def process_oplata_check(message: Message, state: FSMContext):
    try:
        goods_id = db.get_id()
        goods_data = db.get_goods_by_id(goods_id)
        user_id, user_name, goods_name, screenshot, cost = goods_data
        caption = f"User ID: <code>{user_id}</code>\n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{user_name}</b>\n" \
                  f"–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: <b>{goods_name}</b>\n–¶–µ–Ω–∞: <b>{cost} —Ä—É–±</b>"

        await message.answer_photo(photo=screenshot, caption=caption, parse_mode="HTML",
                                   reply_markup=kb.like_dislike_kb)
        await state.set_state(Form.like_dislike)
    except:
        await message.answer("–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –æ–ø–ª–∞—Ç—ã!")
        await state.clear()
        await main_menu(message, state)


@dp.message(Form.like_dislike)
async def otsenka(message: Message, state: FSMContext) -> None:
    if message.text == "–ú–µ–Ω—é":
        await main_menu(message)
        await state.clear()
    elif message.text == "üëç":
        await process_oplata_approval(message, state)
        await process_oplata_check(message, state)
    elif message.text == "üëé":
        await process_oplata_dislike(message, state)
        await process_oplata_check(message, state)


async def process_oplata_approval(message: Message, state: FSMContext):
    try:
        goods_id = db.get_id()
        goods_data = db.get_goods_by_id(goods_id)
        user_id, user_name, goods_name, screenshot, cost = goods_data

        code = db.get_subs_code_by_data(data=db.check_data_buy(user_id=user_id))

        db.add_to_approved_goods(screensh=screenshot, user_name=user_name, user_id=user_id, goods_name=goods_name,
                                 goods_cost=cost)

        await bot.send_message(chat_id=user_id,
                               text=f"<b>{user_name}</b>, –≤–æ—Ç –í–∞—à –∫–æ–¥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ <b>{goods_name}</b>:\n<code>"
                                    f"<b>{code}</b></code>", parse_mode="HTML")
        db.del_subs_code_by_code(code=code)
        db.del_goods_by_id(goods_id)
        await message.answer("–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")

    except:
        await message.answer("–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –æ–ø–ª–∞—Ç—ã!")
        await state.clear()
        await main_menu(message, state)


async def process_oplata_dislike(message: Message, state: FSMContext):
    try:
        goods_id = db.get_id()
        db.del_goods_by_id(goods_id)
        await message.answer("–û–ø–ª–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!")
    except:
        await message.answer("–í—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤—Å–µ –æ–ø–ª–∞—Ç—ã!")
        await state.clear()
        await main_menu(message, state)


# </–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫—É–ø–∫–∏>---------------------------------------------


# <–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é>---------------------------------------------
@dp.message()
async def ya_hz(message: Message):
    await message.answer("<b>–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é...</b>", parse_mode="HTML")


# </–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω–∏–º–∞—é>---------------------------------------------


# <–ó–∞–ø—É—Å–∫!>-------------------------------------------------------
async def main():
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
